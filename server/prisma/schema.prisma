// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  STUDENT
  PARENT
  EDUCATOR
  ADMIN
}

enum AssesmentType {
  TOPIC_QUIZ
  CHAPTER_TEST
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  SHORT_ANSWER
  FILL_IN_THE_BLANK
}

enum SessionStatus {
  ACTIVE
  COMPLETED
  ABANDONED
}

model User {
  id                    String                 @id @default(cuid())
  email                 String                 @unique
  password              String
  name                  String
  role                  UserRole               @default(STUDENT)
  isActive              Boolean                @default(true)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  googleId              String?                @unique
  sessions              TutoringSession[]
  assessmentSubmissions AssessmentSubmission[]
  progress              Progress[]
  mistakes              Mistake[]

  @@index([email])
  @@index([googleId])
  @@index([role])
}

model Subject {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  gradeLevel  String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  chapters    Chapter[]
  progress    Progress[]

  @@index([name, gradeLevel])
  @@index([gradeLevel])
}

model Chapter {
  id         String      @id @default(cuid())
  subjectId  String
  subject    Subject     @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  name       String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  topics     Topic[]
  assessments Assessment[]
  progress   Progress[]

  @@index([subjectId])
}

model Topic {
  id         String      @id @default(cuid())
  chapterId  String
  chapter    Chapter     @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  name       String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  lessons    Lesson[]
  assessments Assessment[]
  progress   Progress[]

  @@index([chapterId])
}

model Lesson {
  id          String   @id @default(cuid())
  topicId     String
  topic       Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)
  title       String
  content     String   @db.Text
  voiceScript String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  sessions TutoringSession[]
  progress Progress[]

  @@index([topicId])
}

model Assessment {
  id           String                 @id @default(cuid())
  chapterId    String?
  chapter      Chapter?               @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  topicId      String?
  topic        Topic?                 @relation(fields: [topicId], references: [id], onDelete: Cascade)
  type         AssesmentType
  title        String
  passingScore Int                    @default(60)
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt
  questions    Question[]
  submissions  AssessmentSubmission[]

  @@index([chapterId])
  @@index([topicId])
  @@index([type])
}

model Question {
  id            String       @id @default(cuid())
  assessmentId  String
  assessment    Assessment   @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  type          QuestionType
  questionText  String       @db.Text
  options       Json? // For multiple choice questions
  correctAnswer String       @db.Text
  explanation   String?      @db.Text
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  answers       Answer[]

  @@index([assessmentId])
}

model AssessmentSubmission {
  id           String     @id @default(cuid())
  assessmentId String
  assessment   Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  studentId    String
  student      User       @relation(fields: [studentId], references: [id], onDelete: Cascade)
  submittedAt  DateTime?
  score        Float?
  isPassed     Boolean?
  createdAt    DateTime   @default(now())

  answers Answer[]

  @@index([assessmentId])
  @@index([studentId])
}

model Answer {
  id           String               @id @default(cuid())
  submissionId String
  submission   AssessmentSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  questionId   String
  question     Question             @relation(fields: [questionId], references: [id], onDelete: Cascade)
  answer       String               @db.Text
  isCorrect    Boolean
  createdAt    DateTime             @default(now())

  @@index([submissionId])
  @@index([questionId])
}

model TutoringSession {
  id           String        @id @default(cuid())
  studentId    String
  student      User          @relation(fields: [studentId], references: [id], onDelete: Cascade)
  lessonId     String
  lesson       Lesson        @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  startedAt    DateTime      @default(now())
  endedAt      DateTime?
  status       SessionStatus @default(ACTIVE)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  interactions Interaction[]

  @@index([studentId])
  @@index([lessonId])
  @@index([status])
}

model Interaction {
  id               String          @id @default(cuid())
  sessionId        String
  session          TutoringSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  studentInput     String?         @db.Text
  aiResponse       String?         @db.Text
  voiceInputUrl    String?
  voiceResponseUrl String?
  timestamp        DateTime        @default(now())

  @@index([sessionId])
  @@index([timestamp])
}

model Progress {
  id                   String    @id @default(cuid())
  studentId            String
  student              User      @relation(fields: [studentId], references: [id], onDelete: Cascade)
  subjectId            String
  subject              Subject   @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  chapterId            String?
  chapter              Chapter?  @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  topicId              String?
  topic                Topic?    @relation(fields: [topicId], references: [id], onDelete: Cascade)
  lessonId             String?
  lesson               Lesson?   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  completionPercentage Float     @default(0.0)
  lastAccessed         DateTime? @default(now())
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  @@unique([studentId, lessonId])
  @@index([studentId])
  @@index([subjectId])
  @@index([chapterId])
  @@index([topicId])
}

model Mistake {
  id              String   @id @default(cuid())
  studentId       String
  student         User     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  questionId      String
  incorrectAnswer String   @db.Text
  correctAnswer   String   @db.Text
  topic           String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([studentId])
  @@index([topic])
}
